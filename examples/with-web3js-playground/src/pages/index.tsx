import Head from "next/head";
import { useState } from "react";
import { web3, bloctoSDK } from "../services/ethereum";

const userOp = {
  sender: "0x9fd042a18e90ce326073fa70f111dc9d798d9a52",
  nonce: "123",
  init_code: "0x68656c6c6f",
  call_data: "0x776F726C64",
  call_gas_limit: "1000",
  verification_gas_limit: "2300",
  pre_verification_gas: "3100",
  max_fee_per_gas: "8500",
  max_priority_fee_per_gas: "1",
  paymaster_and_data: "0x626c6f63746f",
  signature: "0x636c656d656e74",
};

export default function Home() {
  const [address, setAddress] = useState<undefined | string>(undefined);
  const [userOpHash, setUserOpHash] = useState<string>("");
  const [estimateUserOpHash, setEstimateUserOpHash] = useState<string>("");
  const [userOpByHash, setUserOpByHash] = useState<string>("");
  const [entryPoint, setEntryPoint] = useState<string[]>([]);
  const [userOpReceipt, setUserOpReceipt] = useState<string>("");

  const connectHandler = async () => {
    const accounts = await bloctoSDK?.ethereum?.enable();
    const [addr] = accounts || [];
    setAddress(addr);
  };
  const disconnectHandler = async () => {
    await bloctoSDK?.ethereum?.request({ method: "wallet_disconnect" });
    setAddress(undefined);
    setUserOpHash("");
  };

  const getEntryPoint = async () => {
    try {
      const result = await web3.eth.supportedEntryPoints();
      setEntryPoint(result);
    } catch (error) {
      console.error("error: ", error);
    }
  };

  const sendUserOp = async () => {
    try {
      if (entryPoint.length === 0) {
        await getEntryPoint();
      }
      const result = await web3.eth.sendUserOperation(userOp, entryPoint[0]);
      setUserOpHash(result);
    } catch (error) {
      console.error("sendUserOp error", error);
    }
  };
  const getUserOperationReceipt = async () => {
    try {
      const result = await web3.eth.getUserOperationReceipt(userOpHash);
      setUserOpReceipt(result);
    } catch (error) {
      console.error("error: ", error);
    }
  };

  const estimateUserOpGas = async () => {
    try {
      if (entryPoint.length === 0) {
        await getEntryPoint();
      }
      const result = await web3.eth.estimateUserOperationGas(
        userOp,
        entryPoint[0]
      );
      setEstimateUserOpHash(result);
    } catch (error) {
      console.error("estimateUserOpGas error: ", error);
    }
  };

  const getUserOpByHash = async () => {
    try {
      const result = await web3.eth.getUserOperationByHash(userOpHash);
      setUserOpByHash(result);
      console.log("result: ", result);
    } catch (error) {
      console.error("getUserOpByHash error: ", error);
    }
  };

  return (
    <>
      <Head>
        <title>Web3js playground</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {address ? (
          <>
            <button onClick={disconnectHandler}>
              <span>disconnect</span>
            </button>
            <button onClick={getEntryPoint}>
              <span>getEntryPoint</span>
            </button>
            {entryPoint.length > 0 && (
              <code>entryPoint: {JSON.stringify(entryPoint)}</code>
            )}
            <button onClick={sendUserOp}>
              <span>sendUserOp</span>
            </button>
            {userOpHash && (
              <code>userOpHash: {JSON.stringify(userOpHash)}</code>
            )}
            <button onClick={estimateUserOpGas}>
              <span>estimateUserOpGas</span>
            </button>
            {estimateUserOpHash && (
              <code>userOpHash: {JSON.stringify(estimateUserOpHash)}</code>
            )}
            <button onClick={getUserOpByHash}>
              <span>getUserOpByHash</span>
            </button>
            {userOpByHash && (
              <code>getUserOpByHash: {JSON.stringify(userOpByHash)}</code>
            )}
            <button onClick={getUserOperationReceipt}>
              <span>getUserOpReceipt</span>
            </button>
            {userOpReceipt && (
              <code>UserOpReceipt: {JSON.stringify(userOpReceipt)}</code>
            )}
          </>
        ) : (
          <button onClick={connectHandler}>
            <span>connect</span>
          </button>
        )}
      </main>
    </>
  );
}
